!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var r,i,s,o;function l(e,t,n){const r=n.value;return{configurable:!0,get(){return r.bind(this)}}}n.r(t),n.d(t,"App",(function(){return h})),(r||(r={})).Component=class{constructor(e,t,n,r){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const i=document.importNode(this.templateElement.content,!0);this.element=i.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}},function(e){let t;!function(e){e[e.active=0]="active",e[e.finished=1]="finished"}(t=e.ProjectStatus||(e.ProjectStatus={}));e.Project=class{constructor(e,t,n,r,i){this.id=e,this.title=t,this.description=n,this.people=r,this.status=i}}}(i||(i={})),function(e){class t{constructor(){this.projects=[],this.listeners=[]}static getInstance(){return this.instance?this.instance:this.instance=new t}addListener(e){this.listeners.push(e)}addProject(e,t,n){const r=new i.Project(Math.random().toString(),e,t,n,i.ProjectStatus.active);this.projects.push(r),this.updateListeners()}moveProject(e,t){const n=this.projects.find(t=>t.id===e);n&&n.status!==t&&(n.status=t),this.updateListeners()}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}}e.ProjectState=t,e.projectState=t.getInstance()}(s||(s={})),function(e){e.Validate=function(e){let t=!0;return e.required&&(t=t&&0!==e.value.toString().trim().length),null!=e.minLength&&"string"==typeof e.value&&(t=t&&e.value.length>e.minLength),null!=e.maxLength&&"string"==typeof e.value&&(t=t&&e.value.length<e.maxLength),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value>e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value<e.max),t}}(o||(o={}));var a,c=function(e,t,n,r){var i,s=arguments.length,o=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(i=e[l])&&(o=(s<3?i(o):s>3?i(t,n,o):i(t,n))||o);return s>3&&o&&Object.defineProperty(t,n,o),o};!function(e){class t extends r.Component{constructor(){super("project-input","app",!0,"user-input"),this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.peopleInputElement=this.element.querySelector("#people"),this.configure(),this.renderContent()}gatherUserInput(){const e=this.titleInputElement.value,t=this.descriptionInputElement.value,n=this.peopleInputElement.value,r={value:e,required:!0},i={value:t,required:!0,minLength:5},s={value:e,required:!0,min:1,max:5};if(o.Validate(r)&&o.Validate(i)&&o.Validate(s))return[e,t,+n];alert("Input is incorrect! Try again")}clearingFields(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,n,r]=t;s.projectState.addProject(e,n,r),this.clearingFields()}}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){}}c([l],t.prototype,"submitHandler",null),e.ProjectInput=t}(a||(a={}));var u,d=function(e,t,n,r){var i,s=arguments.length,o=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(i=e[l])&&(o=(s<3?i(o):s>3?i(t,n,o):i(t,n))||o);return s>3&&o&&Object.defineProperty(t,n,o),o};!function(e){class t extends r.Component{constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}get persons(){return 1===this.project.people?"1 Person":this.project.people+" People"}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){console.log("drag event ended")}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" assigned",this.element.querySelector("p").textContent="Project description: "+this.project.description}}d([l],t.prototype,"dragStartHandler",null),e.ProjectItem=t}(u||(u={}));var p,h,f,m=function(e,t,n,r){var i,s=arguments.length,o=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(i=e[l])&&(o=(s<3?i(o):s>3?i(t,n,o):i(t,n))||o);return s>3&&o&&Object.defineProperty(t,n,o),o};!function(e){class t extends r.Component{constructor(e){super("project-list","app",!1,e+"-projects"),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}dragOverHandler(e){if(e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]){e.preventDefault(),this.element.querySelector("ul").classList.add("droppable")}}dropHandler(e){const t=e.dataTransfer.getData("text/plain");s.projectState.moveProject(t,"active"===this.type?i.ProjectStatus.active:i.ProjectStatus.finished)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}renderProjects(){document.getElementById(this.type+"-projects-list").innerHTML="";for(const e of this.assignedProjects)new u.ProjectItem(this.element.querySelector("ul").id,e)}renderContent(){const e=this.type+"-projects-list";this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+" PROJECTS"}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),s.projectState.addListener(e=>{const t=e.filter(e=>"active"===this.type?e.status===i.ProjectStatus.active:e.status===i.ProjectStatus.finished);this.assignedProjects=t,this.renderProjects()})}}m([l],t.prototype,"dragOverHandler",null),m([l],t.prototype,"dropHandler",null),m([l],t.prototype,"dragLeaveHandler",null),e.ProjectList=t}(p||(p={})),(f=h||(h={})).proj=new a.ProjectInput,f.activeProjList=new p.ProjectList("active"),f.finishedProjList=new p.ProjectList("finished")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,